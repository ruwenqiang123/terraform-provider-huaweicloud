// Generated by PMS #212
package as

import (
	"context"
	"regexp"
	"strings"

	"github.com/hashicorp/go-multierror"
	"github.com/hashicorp/go-uuid"
	"github.com/hashicorp/terraform-plugin-sdk/v2/diag"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/tidwall/gjson"

	"github.com/huaweicloud/terraform-provider-huaweicloud/huaweicloud/config"
	"github.com/huaweicloud/terraform-provider-huaweicloud/huaweicloud/helper/filters"
	"github.com/huaweicloud/terraform-provider-huaweicloud/huaweicloud/helper/httphelper"
	"github.com/huaweicloud/terraform-provider-huaweicloud/huaweicloud/helper/schemas"
	"github.com/huaweicloud/terraform-provider-huaweicloud/huaweicloud/utils"
)

func DataSourceAsPlannedTasks() *schema.Resource {
	return &schema.Resource{
		ReadContext: dataSourceAsPlannedTasksRead,

		Schema: map[string]*schema.Schema{
			"region": {
				Type:        schema.TypeString,
				Optional:    true,
				Computed:    true,
				Description: `Specifies the region in which to query the resource. If omitted, the provider-level region will be used.`,
			},
			"scaling_group_id": {
				Type:        schema.TypeString,
				Required:    true,
				Description: `Specifies the ID of the AS group to which the planned tasks belong.`,
			},
			"task_id": {
				Type:        schema.TypeString,
				Optional:    true,
				Description: `Specifies the ID of the planned task.`,
			},
			"name": {
				Type:        schema.TypeString,
				Optional:    true,
				Description: `Specifies the name of the planned task.`,
			},
			"scheduled_tasks": {
				Type:        schema.TypeList,
				Computed:    true,
				Description: `All planned tasks that match the filter parameters.`,
				Elem: &schema.Resource{
					Schema: map[string]*schema.Schema{
						"id": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `The ID of the planned task.`,
						},
						"scaling_group_id": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `The ID of the AS group to which the planned task belongs.`,
						},
						"name": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `The name of the planned task.`,
						},
						"scheduled_policy": {
							Type:        schema.TypeList,
							Computed:    true,
							Description: `The planned task policy.`,
							Elem: &schema.Resource{
								Schema: map[string]*schema.Schema{
									"start_time": {
										Type:        schema.TypeString,
										Computed:    true,
										Description: `The start time of the valid period of the planned task, in RFC3339 format.`,
									},
									"end_time": {
										Type:        schema.TypeString,
										Computed:    true,
										Description: `The end time of the valid period of the planned task, in RFC3339 format.`,
									},
									"launch_time": {
										Type:        schema.TypeString,
										Computed:    true,
										Description: `The execute time of the planned task.`,
									},
									"recurrence_type": {
										Type:        schema.TypeString,
										Computed:    true,
										Description: `The triggering type of planned task.`,
									},
									"recurrence_value": {
										Type:        schema.TypeString,
										Computed:    true,
										Description: `The frequency at which planned task are triggered.`,
									},
								},
							},
						},
						"instance_number": {
							Type:        schema.TypeList,
							Computed:    true,
							Description: `The instance number settings of the AS group.`,
							Elem: &schema.Resource{
								Schema: map[string]*schema.Schema{
									"max": {
										Type:        schema.TypeInt,
										Computed:    true,
										Description: `The maximum number of instances in the AS group.`,
									},
									"min": {
										Type:        schema.TypeInt,
										Computed:    true,
										Description: `The minimum number of instances in the AS group.`,
									},
									"desire": {
										Type:        schema.TypeInt,
										Computed:    true,
										Description: `The expected number of instances in the AS group.`,
									},
								},
							},
						},
						"created_at": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `The creation time of the planned task, in RFC3339 format.`,
						},
					},
				},
			},
		},
	}
}

type PlannedTasksDSWrapper struct {
	*schemas.ResourceDataWrapper
	Config *config.Config
}

func newPlannedTasksDSWrapper(d *schema.ResourceData, meta interface{}) *PlannedTasksDSWrapper {
	return &PlannedTasksDSWrapper{
		ResourceDataWrapper: schemas.NewSchemaWrapper(d),
		Config:              meta.(*config.Config),
	}
}

func dataSourceAsPlannedTasksRead(_ context.Context, d *schema.ResourceData, meta interface{}) diag.Diagnostics {
	wrapper := newPlannedTasksDSWrapper(d, meta)
	lisGroSchTasRst, err := wrapper.ListGroupScheduledTasks()
	if err != nil {
		return diag.FromErr(err)
	}

	id, err := uuid.GenerateUUID()
	if err != nil {
		return diag.FromErr(err)
	}
	d.SetId(id)

	err = wrapper.listGroupScheduledTasksToSchema(lisGroSchTasRst)
	if err != nil {
		return diag.FromErr(err)
	}

	return nil
}

// @API AS GET /autoscaling-api/v1/{project_id}/scaling-groups/{scaling_group_id}/scheduled-tasks
func (w *PlannedTasksDSWrapper) ListGroupScheduledTasks() (*gjson.Result, error) {
	client, err := w.NewClient(w.Config, "autoscaling")
	if err != nil {
		return nil, err
	}

	uri := "/autoscaling-api/v1/{project_id}/scaling-groups/{scaling_group_id}/scheduled-tasks"
	uri = strings.ReplaceAll(uri, "{scaling_group_id}", w.Get("scaling_group_id").(string))
	return httphelper.New(client).
		Method("GET").
		URI(uri).
		MarkerPager("scheduled_tasks", "page_info.next_marker", "marker").
		Filter(
			filters.New().From("scheduled_tasks").
				Where("task_id", "=", w.Get("task_id")).
				Where("name", "=", w.Get("name")),
		).
		Request().
		Result()
}

func (w *PlannedTasksDSWrapper) listGroupScheduledTasksToSchema(body *gjson.Result) error {
	d := w.ResourceData
	mErr := multierror.Append(nil,
		d.Set("region", w.Config.GetRegion(w.ResourceData)),
		d.Set("scheduled_tasks", schemas.SliceToList(body.Get("scheduled_tasks"),
			func(scheduledTasks gjson.Result) any {
				return map[string]any{
					"id":               scheduledTasks.Get("task_id").Value(),
					"scaling_group_id": scheduledTasks.Get("scaling_group_id").Value(),
					"name":             scheduledTasks.Get("name").Value(),
					"scheduled_policy": schemas.SliceToList(scheduledTasks.Get("scheduled_policy"),
						func(scheduledPolicy gjson.Result) any {
							return map[string]any{
								"start_time":       w.setSchTasSchPolStaTime(scheduledPolicy),
								"end_time":         w.setSchTasSchPolEndTime(scheduledPolicy),
								"launch_time":      w.setSchTasSchPolLauTime(scheduledPolicy),
								"recurrence_type":  scheduledPolicy.Get("recurrence_type").Value(),
								"recurrence_value": scheduledPolicy.Get("recurrence_value").Value(),
							}
						},
					),
					"instance_number": schemas.SliceToList(scheduledTasks.Get("instance_number"),
						func(instanceNumber gjson.Result) any {
							return map[string]any{
								"max":    instanceNumber.Get("max").Value(),
								"min":    instanceNumber.Get("min").Value(),
								"desire": instanceNumber.Get("desire").Value(),
							}
						},
					),
					"created_at": w.setSchTasCreTime(scheduledTasks),
				}
			},
		)),
	)
	return mErr.ErrorOrNil()
}

func (*PlannedTasksDSWrapper) setSchTasSchPolStaTime(data gjson.Result) string {
	return utils.FormatTimeStampRFC3339(utils.ConvertTimeStrToNanoTimestamp(data.Get("start_time").String(), "2006-01-02T15:04Z")/1000, false)
}

func (*PlannedTasksDSWrapper) setSchTasSchPolEndTime(data gjson.Result) string {
	return utils.FormatTimeStampRFC3339(utils.ConvertTimeStrToNanoTimestamp(data.Get("end_time").String(), "2006-01-02T15:04Z")/1000, false)
}

func (*PlannedTasksDSWrapper) setSchTasSchPolLauTime(data gjson.Result) string {
	var time string
	rex := regexp.MustCompile(`^\d{2}:\d{2}$`)
	timeStr := data.Get("launch_time").String()
	if rex.MatchString(timeStr) {
		time = timeStr
	} else {
		timeStamp := utils.ConvertTimeStrToNanoTimestamp(timeStr, "2006-01-02T15:04Z")
		time = utils.FormatTimeStampRFC3339(timeStamp/1000, false)
	}
	return time
}

func (*PlannedTasksDSWrapper) setSchTasCreTime(data gjson.Result) string {
	return utils.FormatTimeStampRFC3339(utils.ConvertTimeStrToNanoTimestamp(data.Get("create_time").String())/1000, false)
}
