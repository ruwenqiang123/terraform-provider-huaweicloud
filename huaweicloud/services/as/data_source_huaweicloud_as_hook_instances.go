// Generated by PMS #214
package as

import (
	"context"
	"strings"

	"github.com/hashicorp/go-multierror"
	"github.com/hashicorp/go-uuid"
	"github.com/hashicorp/terraform-plugin-sdk/v2/diag"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/tidwall/gjson"

	"github.com/huaweicloud/terraform-provider-huaweicloud/huaweicloud/config"
	"github.com/huaweicloud/terraform-provider-huaweicloud/huaweicloud/helper/filters"
	"github.com/huaweicloud/terraform-provider-huaweicloud/huaweicloud/helper/httphelper"
	"github.com/huaweicloud/terraform-provider-huaweicloud/huaweicloud/helper/schemas"
	"github.com/huaweicloud/terraform-provider-huaweicloud/huaweicloud/utils"
)

func DataSourceAsHookInstances() *schema.Resource {
	return &schema.Resource{
		ReadContext: dataSourceAsHookInstancesRead,

		Schema: map[string]*schema.Schema{
			"region": {
				Type:        schema.TypeString,
				Optional:    true,
				Computed:    true,
				Description: `Specifies the region in which to query the resource. If omitted, the provider-level region will be used.`,
			},
			"scaling_group_id": {
				Type:        schema.TypeString,
				Required:    true,
				Description: `Specifies the ID of the AS group to which the AS instances belong.`,
			},
			"instance_id": {
				Type:        schema.TypeString,
				Optional:    true,
				Description: `Specifies the ID of the AS instance.`,
			},
			"lifecycle_hook_name": {
				Type:        schema.TypeString,
				Optional:    true,
				Description: `Specifies the name of the lifecycle hook.`,
			},
			"lifecycle_hook_status": {
				Type:        schema.TypeString,
				Optional:    true,
				Description: `Specifies the status of the lifecycle hook.`,
			},
			"instance_hanging_info": {
				Type:        schema.TypeList,
				Computed:    true,
				Description: `All lifecycle hook information about the AS instances.`,
				Elem: &schema.Resource{
					Schema: map[string]*schema.Schema{
						"scaling_group_id": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `The ID of the AS group to which the AS instance belongs.`,
						},
						"instance_id": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `The ID of the AS instance.`,
						},
						"lifecycle_hook_name": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `The name of the lifecycle hook.`,
						},
						"lifecycle_hook_status": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `The status of the lifecycle hook.`,
						},
						"lifecycle_action_key": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `The lifecycle action key, which determines the lifecycle callback object.`,
						},
						"default_result": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `The default lifecycle hook callback operation.`,
						},
						"timeout": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `The timeout duration, in RFC3339 format.`,
						},
					},
				},
			},
		},
	}
}

type HookInstancesDSWrapper struct {
	*schemas.ResourceDataWrapper
	Config *config.Config
}

func newHookInstancesDSWrapper(d *schema.ResourceData, meta interface{}) *HookInstancesDSWrapper {
	return &HookInstancesDSWrapper{
		ResourceDataWrapper: schemas.NewSchemaWrapper(d),
		Config:              meta.(*config.Config),
	}
}

func dataSourceAsHookInstancesRead(_ context.Context, d *schema.ResourceData, meta interface{}) diag.Diagnostics {
	wrapper := newHookInstancesDSWrapper(d, meta)
	listHookInstancesRst, err := wrapper.ListHookInstances()
	if err != nil {
		return diag.FromErr(err)
	}

	id, err := uuid.GenerateUUID()
	if err != nil {
		return diag.FromErr(err)
	}
	d.SetId(id)

	err = wrapper.listHookInstancesToSchema(listHookInstancesRst)
	if err != nil {
		return diag.FromErr(err)
	}

	return nil
}

// @API AS GET /autoscaling-api/v1/{project_id}/scaling_instance_hook/{scaling_group_id}/list
func (w *HookInstancesDSWrapper) ListHookInstances() (*gjson.Result, error) {
	client, err := w.NewClient(w.Config, "autoscaling")
	if err != nil {
		return nil, err
	}

	uri := "/autoscaling-api/v1/{project_id}/scaling_instance_hook/{scaling_group_id}/list"
	uri = strings.ReplaceAll(uri, "{scaling_group_id}", w.Get("scaling_group_id").(string))
	params := map[string]any{
		"instance_id": w.Get("instance_id"),
	}
	params = utils.RemoveNil(params)
	return httphelper.New(client).
		Method("GET").
		URI(uri).
		Query(params).
		Filter(
			filters.New().From("instance_hanging_info").
				Where("lifecycle_hook_name", "=", w.Get("lifecycle_hook_name")).
				Where("lifecycle_hook_status", "=", w.Get("lifecycle_hook_status")),
		).
		Request().
		Result()
}

func (w *HookInstancesDSWrapper) listHookInstancesToSchema(body *gjson.Result) error {
	d := w.ResourceData
	mErr := multierror.Append(nil,
		d.Set("region", w.Config.GetRegion(w.ResourceData)),
		d.Set("instance_hanging_info", schemas.SliceToList(body.Get("instance_hanging_info"),
			func(insHanInfo gjson.Result) any {
				return map[string]any{
					"scaling_group_id":      insHanInfo.Get("scaling_group_id").Value(),
					"instance_id":           insHanInfo.Get("instance_id").Value(),
					"lifecycle_hook_name":   insHanInfo.Get("lifecycle_hook_name").Value(),
					"lifecycle_hook_status": insHanInfo.Get("lifecycle_hook_status").Value(),
					"lifecycle_action_key":  insHanInfo.Get("lifecycle_action_key").Value(),
					"default_result":        insHanInfo.Get("default_result").Value(),
					"timeout":               w.setInsHanInfTimeout(insHanInfo),
				}
			},
		)),
	)
	return mErr.ErrorOrNil()
}

func (*HookInstancesDSWrapper) setInsHanInfTimeout(data gjson.Result) string {
	return utils.FormatTimeStampRFC3339(utils.ConvertTimeStrToNanoTimestamp(data.Get("timeout").String())/1000, false)
}
