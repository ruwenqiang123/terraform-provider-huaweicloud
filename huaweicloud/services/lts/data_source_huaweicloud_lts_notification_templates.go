// Generated by PMS #221
package lts

import (
	"context"
	"strings"

	"github.com/hashicorp/go-multierror"
	"github.com/hashicorp/go-uuid"
	"github.com/hashicorp/terraform-plugin-sdk/v2/diag"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/tidwall/gjson"

	"github.com/huaweicloud/terraform-provider-huaweicloud/huaweicloud/config"
	"github.com/huaweicloud/terraform-provider-huaweicloud/huaweicloud/helper/httphelper"
	"github.com/huaweicloud/terraform-provider-huaweicloud/huaweicloud/helper/schemas"
	"github.com/huaweicloud/terraform-provider-huaweicloud/huaweicloud/utils"
)

func DataSourceLtsNotificationTemplates() *schema.Resource {
	return &schema.Resource{
		ReadContext: dataSourceLtsNotificationTemplatesRead,

		Schema: map[string]*schema.Schema{
			"region": {
				Type:        schema.TypeString,
				Optional:    true,
				Computed:    true,
				Description: `Specifies the region in which to query the resource. If omitted, the provider-level region will be used.`,
			},
			"domain_id": {
				Type:        schema.TypeString,
				Required:    true,
				Description: `Specified the account ID of IAM user.`,
			},
			"templates": {
				Type:        schema.TypeList,
				Computed:    true,
				Description: `All notification templates that match the filter parameters.`,
				Elem: &schema.Resource{
					Schema: map[string]*schema.Schema{
						"name": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `The name of the notification template.`,
						},
						"source": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `The source of the notification template.`,
						},
						"locale": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `The language of the notification template.`,
						},
						"templates": {
							Type:        schema.TypeList,
							Computed:    true,
							Description: `The list of notification template bodies.`,
							Elem: &schema.Resource{
								Schema: map[string]*schema.Schema{
									"sub_type": {
										Type:        schema.TypeString,
										Computed:    true,
										Description: `The type of the template body.`,
									},
									"content": {
										Type:        schema.TypeString,
										Computed:    true,
										Description: `The content of the template body.`,
									},
								},
							},
						},
						"description": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `The description of the notification template.`,
						},
						"created_at": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `The creation time of the log group, in RFC3339 format.`,
						},
						"updated_at": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `The latest update time of the log group, in RFC3339 format.`,
						},
					},
				},
			},
		},
	}
}

type NotificationTemplatesDSWrapper struct {
	*schemas.ResourceDataWrapper
	Config *config.Config
}

func newNotificationTemplatesDSWrapper(d *schema.ResourceData, meta interface{}) *NotificationTemplatesDSWrapper {
	return &NotificationTemplatesDSWrapper{
		ResourceDataWrapper: schemas.NewSchemaWrapper(d),
		Config:              meta.(*config.Config),
	}
}

func dataSourceLtsNotificationTemplatesRead(_ context.Context, d *schema.ResourceData, meta interface{}) diag.Diagnostics {
	wrapper := newNotificationTemplatesDSWrapper(d, meta)
	lisNotTemRst, err := wrapper.ListNotificationTemplates()
	if err != nil {
		return diag.FromErr(err)
	}

	id, err := uuid.GenerateUUID()
	if err != nil {
		return diag.FromErr(err)
	}
	d.SetId(id)

	err = wrapper.listNotificationTemplatesToSchema(lisNotTemRst)
	if err != nil {
		return diag.FromErr(err)
	}

	return nil
}

// @API LTS GET /v2/{project_id}/{domain_id}/lts/events/notification/templates
func (w *NotificationTemplatesDSWrapper) ListNotificationTemplates() (*gjson.Result, error) {
	client, err := w.NewClient(w.Config, "lts")
	if err != nil {
		return nil, err
	}

	uri := "/v2/{project_id}/{domain_id}/lts/events/notification/templates"
	uri = strings.ReplaceAll(uri, "{domain_id}", w.Get("domain_id").(string))
	return httphelper.New(client).
		Method("GET").
		URI(uri).
		Request().
		Result()
}

func (w *NotificationTemplatesDSWrapper) listNotificationTemplatesToSchema(body *gjson.Result) error {
	d := w.ResourceData
	mErr := multierror.Append(nil,
		d.Set("region", w.Config.GetRegion(w.ResourceData)),
		d.Set("templates", schemas.SliceToList(body.Get("results"),
			func(templates gjson.Result) any {
				return map[string]any{
					"name":   templates.Get("name").Value(),
					"source": templates.Get("source").Value(),
					"locale": templates.Get("locale").Value(),
					"templates": schemas.SliceToList(templates.Get("templates"),
						func(templates gjson.Result) any {
							return map[string]any{
								"sub_type": templates.Get("sub_type").Value(),
								"content":  templates.Get("content").Value(),
							}
						},
					),
					"description": templates.Get("desc").Value(),
					"created_at":  w.setResultsCreateTime(templates),
					"updated_at":  w.setResultsModifyTime(templates),
				}
			},
		)),
	)
	return mErr.ErrorOrNil()
}

func (*NotificationTemplatesDSWrapper) setResultsCreateTime(data gjson.Result) string {
	// The "create_time" format is a UNIX timestamp.
	// Convert to the time corresponding to the local time zone of the computer.
	return utils.FormatTimeStampRFC3339(data.Get("create_time").Int()/1000, false)
}

func (*NotificationTemplatesDSWrapper) setResultsModifyTime(data gjson.Result) string {
	// The "modify_time" format is a UNIX timestamp.
	// Convert to the time corresponding to the local time zone of the computer.
	return utils.FormatTimeStampRFC3339(data.Get("modify_time").Int()/1000, false)
}
