// Generated by PMS #209
package iam

import (
	"context"

	"github.com/hashicorp/go-multierror"
	"github.com/hashicorp/go-uuid"
	"github.com/hashicorp/terraform-plugin-sdk/v2/diag"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/tidwall/gjson"

	"github.com/huaweicloud/terraform-provider-huaweicloud/huaweicloud/config"
	"github.com/huaweicloud/terraform-provider-huaweicloud/huaweicloud/helper/filters"
	"github.com/huaweicloud/terraform-provider-huaweicloud/huaweicloud/helper/httphelper"
	"github.com/huaweicloud/terraform-provider-huaweicloud/huaweicloud/helper/schemas"
)

func DataSourceIamIdentityVirtualMfaDevices() *schema.Resource {
	return &schema.Resource{
		ReadContext: dataSourceIamIdentityVirtualMfaDevicesRead,

		Schema: map[string]*schema.Schema{
			"user_id": {
				Type:        schema.TypeString,
				Optional:    true,
				Description: `Specifies the user ID to which the virtual MFA device belongs.`,
			},
			"virtual_mfa_devices": {
				Type:        schema.TypeList,
				Computed:    true,
				Description: `The list of virtual MFA devices.`,
				Elem: &schema.Resource{
					Schema: map[string]*schema.Schema{
						"serial_number": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `The virtual MFA device serial number.`,
						},
						"user_id": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `The user ID to which the virtual MFA device belongs.`,
						},
					},
				},
			},
		},
	}
}

type IdentityVirtualMfaDevicesDSWrapper struct {
	*schemas.ResourceDataWrapper
	Config *config.Config
}

func newIdentityVirtualMfaDevicesDSWrapper(d *schema.ResourceData, meta interface{}) *IdentityVirtualMfaDevicesDSWrapper {
	return &IdentityVirtualMfaDevicesDSWrapper{
		ResourceDataWrapper: schemas.NewSchemaWrapper(d),
		Config:              meta.(*config.Config),
	}
}

func dataSourceIamIdentityVirtualMfaDevicesRead(_ context.Context, d *schema.ResourceData, meta interface{}) diag.Diagnostics {
	wrapper := newIdentityVirtualMfaDevicesDSWrapper(d, meta)
	lisUseMfaDevRst, err := wrapper.ListUserMfaDevices()
	if err != nil {
		return diag.FromErr(err)
	}

	id, err := uuid.GenerateUUID()
	if err != nil {
		return diag.FromErr(err)
	}
	d.SetId(id)

	err = wrapper.listUserMfaDevicesToSchema(lisUseMfaDevRst)
	if err != nil {
		return diag.FromErr(err)
	}

	return nil
}

// @API IAM GET /v3.0/OS-MFA/virtual-mfa-devices
func (w *IdentityVirtualMfaDevicesDSWrapper) ListUserMfaDevices() (*gjson.Result, error) {
	client, err := w.NewClient(w.Config, "iam")
	if err != nil {
		return nil, err
	}

	uri := "/v3.0/OS-MFA/virtual-mfa-devices"
	return httphelper.New(client).
		Method("GET").
		URI(uri).
		Filter(
			filters.New().From("virtual_mfa_devices").
				Where("user_id", "=", w.Get("user_id")),
		).
		Request().
		Result()
}

func (w *IdentityVirtualMfaDevicesDSWrapper) listUserMfaDevicesToSchema(body *gjson.Result) error {
	d := w.ResourceData
	mErr := multierror.Append(nil,
		d.Set("virtual_mfa_devices", schemas.SliceToList(body.Get("virtual_mfa_devices"),
			func(virMfaDevices gjson.Result) any {
				return map[string]any{
					"serial_number": virMfaDevices.Get("serial_number").Value(),
					"user_id":       virMfaDevices.Get("user_id").Value(),
				}
			},
		)),
	)
	return mErr.ErrorOrNil()
}
