// Generated by PMS #192
package apig

import (
	"context"
	"strings"

	"github.com/hashicorp/go-multierror"
	"github.com/hashicorp/go-uuid"
	"github.com/hashicorp/terraform-plugin-sdk/v2/diag"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/tidwall/gjson"

	"github.com/huaweicloud/terraform-provider-huaweicloud/huaweicloud/config"
	"github.com/huaweicloud/terraform-provider-huaweicloud/huaweicloud/helper/httphelper"
	"github.com/huaweicloud/terraform-provider-huaweicloud/huaweicloud/helper/schemas"
	"github.com/huaweicloud/terraform-provider-huaweicloud/huaweicloud/utils"
)

func DataSourceApigEndpointConnections() *schema.Resource {
	return &schema.Resource{
		ReadContext: dataSourceApigEndpointConnectionsRead,

		Schema: map[string]*schema.Schema{
			"region": {
				Type:        schema.TypeString,
				Optional:    true,
				Computed:    true,
				Description: `Specifies the region in which to query the resource. If omitted, the provider-level region will be used.`,
			},
			"instance_id": {
				Type:        schema.TypeString,
				Required:    true,
				Description: `Specifies the dedicated instance ID to which the endpoint connections belong.`,
			},
			"endpoint_id": {
				Type:        schema.TypeString,
				Optional:    true,
				Description: `Specifies the ID of the endpoint connection.`,
			},
			"packet_id": {
				Type:        schema.TypeInt,
				Optional:    true,
				Description: `Specifies packet ID of endpoint connection.`,
			},
			"status": {
				Type:        schema.TypeString,
				Optional:    true,
				Description: `Specifies status of endpoint connection.`,
			},
			"connections": {
				Type:        schema.TypeList,
				Computed:    true,
				Description: `All endpoint connections that match the filter parameters.`,
				Elem: &schema.Resource{
					Schema: map[string]*schema.Schema{
						"id": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `The ID of the endpoint connection.`,
						},
						"packet_id": {
							Type:        schema.TypeInt,
							Computed:    true,
							Description: `The packet ID of the endpoint connection.`,
						},
						"domain_id": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `The IAM account ID of the endpoint connection creator.`,
						},
						"status": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `The current status of the endpoint connection.`,
						},
						"created_at": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `The creation time of the endpoint connection, in RFC3339 format.`,
						},
						"updated_at": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `The latest time of the endpoint connection, in RFC3339 format.`,
						},
					},
				},
			},
		},
	}
}

type EndpointConnectionsDSWrapper struct {
	*schemas.ResourceDataWrapper
	Config *config.Config
}

func newEndpointConnectionsDSWrapper(d *schema.ResourceData, meta interface{}) *EndpointConnectionsDSWrapper {
	return &EndpointConnectionsDSWrapper{
		ResourceDataWrapper: schemas.NewSchemaWrapper(d),
		Config:              meta.(*config.Config),
	}
}

func dataSourceApigEndpointConnectionsRead(_ context.Context, d *schema.ResourceData, meta interface{}) diag.Diagnostics {
	wrapper := newEndpointConnectionsDSWrapper(d, meta)
	lisEndConRst, err := wrapper.ListEndpointConnections()
	if err != nil {
		return diag.FromErr(err)
	}

	id, err := uuid.GenerateUUID()
	if err != nil {
		return diag.FromErr(err)
	}
	d.SetId(id)

	err = wrapper.listEndpointConnectionsToSchema(lisEndConRst)
	if err != nil {
		return diag.FromErr(err)
	}

	return nil
}

// @API APIG GET /v2/{project_id}/apigw/instances/{instance_id}/vpc-endpoint/connections
func (w *EndpointConnectionsDSWrapper) ListEndpointConnections() (*gjson.Result, error) {
	client, err := w.NewClient(w.Config, "apig")
	if err != nil {
		return nil, err
	}

	uri := "/v2/{project_id}/apigw/instances/{instance_id}/vpc-endpoint/connections"
	uri = strings.ReplaceAll(uri, "{instance_id}", w.Get("instance_id").(string))
	params := map[string]any{
		"id":        w.Get("endpoint_id"),
		"marker_id": w.Get("packet_id"),
		"status":    w.Get("status"),
	}
	params = utils.RemoveNil(params)
	return httphelper.New(client).
		Method("GET").
		URI(uri).
		Query(params).
		OffsetPager("connections", "offset", "limit", 500).
		OkCode(200).
		Request().
		Result()
}

func (w *EndpointConnectionsDSWrapper) listEndpointConnectionsToSchema(body *gjson.Result) error {
	d := w.ResourceData
	mErr := multierror.Append(nil,
		d.Set("region", w.Config.GetRegion(w.ResourceData)),
		d.Set("connections", schemas.SliceToList(body.Get("connections"),
			func(connections gjson.Result) any {
				return map[string]any{
					"id":         connections.Get("id").Value(),
					"packet_id":  connections.Get("marker_id").Value(),
					"domain_id":  connections.Get("domain_id").Value(),
					"status":     connections.Get("status").Value(),
					"created_at": w.setConCreAt(connections),
					"updated_at": w.setConUpdAt(connections),
				}
			},
		)),
	)
	return mErr.ErrorOrNil()
}

func (*EndpointConnectionsDSWrapper) setConCreAt(data gjson.Result) string {
	return utils.FormatTimeStampRFC3339(utils.ConvertTimeStrToNanoTimestamp(data.Get("created_at").String())/1000, false)
}

func (*EndpointConnectionsDSWrapper) setConUpdAt(data gjson.Result) string {
	return utils.FormatTimeStampRFC3339(utils.ConvertTimeStrToNanoTimestamp(data.Get("updated_at").String())/1000, false)
}
