// Generated by PMS #234
package er

import (
	"context"
	"strings"

	"github.com/hashicorp/go-multierror"
	"github.com/hashicorp/go-uuid"
	"github.com/hashicorp/terraform-plugin-sdk/v2/diag"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/tidwall/gjson"

	"github.com/huaweicloud/terraform-provider-huaweicloud/huaweicloud/config"
	"github.com/huaweicloud/terraform-provider-huaweicloud/huaweicloud/helper/httphelper"
	"github.com/huaweicloud/terraform-provider-huaweicloud/huaweicloud/helper/schemas"
	"github.com/huaweicloud/terraform-provider-huaweicloud/huaweicloud/utils"
)

func DataSourceErAvailableRoutes() *schema.Resource {
	return &schema.Resource{
		ReadContext: dataSourceErAvailableRoutesRead,

		Schema: map[string]*schema.Schema{
			"region": {
				Type:        schema.TypeString,
				Optional:    true,
				Computed:    true,
				Description: `The region in which to query the available routes.`,
			},
			"route_table_id": {
				Type:        schema.TypeString,
				Required:    true,
				Description: `The route table ID to which the available routes belong.`,
			},
			"destination": {
				Type:        schema.TypeString,
				Optional:    true,
				Description: `The destination address of the routes to be queried.`,
			},
			"resource_type": {
				Type:        schema.TypeString,
				Optional:    true,
				Description: `The attachment type.`,
			},
			"routes": {
				Type:        schema.TypeList,
				Computed:    true,
				Description: `All available routes that match the filter parameters.`,
				Elem: &schema.Resource{
					Schema: map[string]*schema.Schema{
						"id": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `The route ID.`,
						},
						"destination": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `The destination address of the route.`,
						},
						"next_hops": {
							Type:        schema.TypeList,
							Computed:    true,
							Description: `The next hops of the route.`,
							Elem: &schema.Resource{
								Schema: map[string]*schema.Schema{
									"resource_id": {
										Type:        schema.TypeString,
										Computed:    true,
										Description: `The attached resource ID.`,
									},
									"resource_type": {
										Type:        schema.TypeString,
										Computed:    true,
										Description: `The attachment type.`,
									},
									"attachment_id": {
										Type:        schema.TypeString,
										Computed:    true,
										Description: `The attachment ID.`,
									},
								},
							},
						},
						"is_blackhole": {
							Type:        schema.TypeBool,
							Computed:    true,
							Description: `Whether the route is a blackhole route.`,
						},
						"type": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `The route type.`,
						},
					},
				},
			},
		},
	}
}

type AvailableRoutesDSWrapper struct {
	*schemas.ResourceDataWrapper
	Config *config.Config
}

func newAvailableRoutesDSWrapper(d *schema.ResourceData, meta interface{}) *AvailableRoutesDSWrapper {
	return &AvailableRoutesDSWrapper{
		ResourceDataWrapper: schemas.NewSchemaWrapper(d),
		Config:              meta.(*config.Config),
	}
}

func dataSourceErAvailableRoutesRead(_ context.Context, d *schema.ResourceData, meta interface{}) diag.Diagnostics {
	wrapper := newAvailableRoutesDSWrapper(d, meta)
	lisEffRouRst, err := wrapper.ListEffectiveRoutes()
	if err != nil {
		return diag.FromErr(err)
	}

	id, err := uuid.GenerateUUID()
	if err != nil {
		return diag.FromErr(err)
	}
	d.SetId(id)

	err = wrapper.listEffectiveRoutesToSchema(lisEffRouRst)
	if err != nil {
		return diag.FromErr(err)
	}

	return nil
}

// @API ER GET /v3/{project_id}/enterprise-router/route-tables/{route_table_id}/routes
func (w *AvailableRoutesDSWrapper) ListEffectiveRoutes() (*gjson.Result, error) {
	client, err := w.NewClient(w.Config, "er")
	if err != nil {
		return nil, err
	}

	uri := "/v3/{project_id}/enterprise-router/route-tables/{route_table_id}/routes"
	uri = strings.ReplaceAll(uri, "{route_table_id}", w.Get("route_table_id").(string))
	params := map[string]any{
		"destination":   w.Get("destination"),
		"resource_type": w.Get("resource_type"),
	}
	params = utils.RemoveNil(params)
	return httphelper.New(client).
		Method("GET").
		URI(uri).
		Query(params).
		MarkerPager("routes", " routes.route_id", "marker").
		Request().
		Result()
}

func (w *AvailableRoutesDSWrapper) listEffectiveRoutesToSchema(body *gjson.Result) error {
	d := w.ResourceData
	mErr := multierror.Append(nil,
		d.Set("region", w.Config.GetRegion(w.ResourceData)),
		d.Set("routes", schemas.SliceToList(body.Get("routes"),
			func(routes gjson.Result) any {
				return map[string]any{
					"id":          routes.Get("route_id").Value(),
					"destination": routes.Get("destination").Value(),
					"next_hops": schemas.SliceToList(routes.Get("next_hops"),
						func(nextHops gjson.Result) any {
							return map[string]any{
								"resource_id":   nextHops.Get("resource_id").Value(),
								"resource_type": nextHops.Get("resource_type").Value(),
								"attachment_id": nextHops.Get("attachment_id").Value(),
							}
						},
					),
					"is_blackhole": routes.Get("is_blackhole").Value(),
					"type":         routes.Get("route_type").Value(),
				}
			},
		)),
	)
	return mErr.ErrorOrNil()
}
